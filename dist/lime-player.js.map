{"version":3,"sources":["LimePlayer.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"lime-player.js","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\n * Created by mustafa on 8/18/16.\n */\n\nvar LimePlayer = function () {\n  function LimePlayer(elementId) {\n    _classCallCheck(this, LimePlayer);\n\n    this.paused = true;\n    this.videoHasStarted = false;\n    this.elementId = elementId;\n\n    this.player = document.getElementById(elementId);\n\n    this.mediaElement = document.createElement('video');\n    this.mediaElement.setAttribute('controls', 'controls');\n    this.player.appendChild(this.mediaElement);\n\n    this.player.classList.add('lp-video');\n\n    return this;\n  }\n\n  /*\n   * Directly set the media element source\n   *\n   * @param {string} mediaUrl\n   */\n\n\n  _createClass(LimePlayer, [{\n    key: 'src',\n    value: function src(mediaUrl) {\n      this.mediaElement.src = mediaUrl;\n      return this;\n    }\n  }, {\n    key: 'play',\n    value: function play() {\n\n      this.mediaElement.play();\n      this.videoHasStarted = true;\n      this.paused = false;\n      return this;\n    }\n  }, {\n    key: 'pause',\n    value: function pause() {\n\n      if (!this.paused) {\n        this.mediaElement.pause();\n        this.paused = true;\n      }\n\n      return this;\n    }\n  }]);\n\n  return LimePlayer;\n}();"],"sourceRoot":"/source/"}